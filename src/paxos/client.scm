(define-module (paxos client)
   #:export (
     client-loop)
   #:use-module (rnrs bytevectors)
   #:use-module (srfi srfi-41)
   #:use-module (paxos net mcast)
   #:use-module (paxos net datagram-stream)
   #:use-module (paxos misc statemachine))

(define* (client-loop)
  (let* ((rcv  (make-mcast-reciever #:blocking #t))
         (strm (make-datagram-stream rcv))
         (test (lambda (a b) 
                 (let* ((valA (bytevector-u8-ref (string->utf8 a) 0))
                        (valB (bytevector-u8-ref b 0))
                        (res (equal? valA valB)))
                   (format #t "COMP: ~A ~A = ~A ~%" valA valB res) 
                   res)))
         (g    (lambda (p n s) 
                 (format #t "GLOBAL: ~a ~a ~a~%" p n s) 
                 s)))

    ;    (let loop ((thing (stream-car strm))) 
    ;      (format #t "Data: ~a~%" (utf8->string thing)) 
    ;      (loop (stream-car (stream-cdr strm))))
    ;    (let ((vals (stream->list 10 strm)))
    ;      (format #t "~a~%" vals))

    ((automaton init stream-car stream-cdr stream-null? test
                (init  : ("1" -> more)
                         -> init)
                (more  : ("2" -> more)
                       ("3" -> more)
                       ("4" -> end)
                       -> other)
                (other : ("5" -> fail)
                       ("6" -> end)
                       ("7" -> init))
                (fail  : abort)
                (end   : accept)
                :hooks (g))
     strm))) 
